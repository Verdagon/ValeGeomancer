
struct TerrainTilePresenter {
  domino &!GameToDominoConnection;
  vivimap &MemberToViewMapper;
  terrain &!PatternMap<TerrainTile>;
  terrainTile &!TerrainTile;
  location Location;

  tileViewId i64;
  unitViewId! i64;

  nextMemberId! i64; // = 1
  // [member ID, member string]
  members List<(i64, str)>;

  // [member ID, value]
  membersFrontColors List<(i64, Vec4iAnimation)>;
  membersSideColors List<(i64, Vec4iAnimation)>;
  membersFeatures List<(i64, InitialSymbol)>;
  membersOverlays List<(i64, InitialSymbol)>;
  membersItems List<(i64, InitialSymbol)>;
  membersUnitDominoSymbols List<(i64, InitialSymbol)>;
  membersUnitDominoColors List<(i64, Vec4iAnimation)>;
  membersUnitDominoFaces List<(i64, InitialSymbol)>;
  membersUnitDetails List<(i64, InitialSymbol)>;

  highlighted! bool;
  selected! bool;
}

func TerrainTilePresenter(
  domino &!GameToDominoConnection,
  vivimap &MemberToViewMapper,
  terrain &!PatternMap<TerrainTile>,
  terrainTile &!TerrainTile,
  location Location)
TerrainTilePresenter {

  nextMemberId = 1i64;
  eternalMemberId = set nextMemberId = nextMemberId + 1i64;

  highlighted = false;
  selected = false;

  membersFrontColors = List<(i64, Vec4iAnimation)>();
  front Vec4iAnimation = ConstantVec4iAnimationBlue();
  membersFrontColors!.add((eternalMemberId, front));

  membersSideColors = List<(i64, Vec4iAnimation)>();
  side Vec4iAnimation = ConstantVec4iAnimationBlue();
  membersSideColors!.add((eternalMemberId, side));

  membersOverlays = List<(i64, InitialSymbol)>();
  membersFeatures = List<(i64, InitialSymbol)>();
  membersItems = List<(i64, InitialSymbol)>();

  initialTileDescription =
      InitialTile(
          location,
          terrainTile.elevation,
          CalculateTintedFrontColor(membersFrontColors.get(membersFrontColors.len() - 1).1, selected, highlighted),
          membersSideColors.get(membersSideColors.len() - 1).1.clone(),
          CalculateMaybeOverlay(&membersOverlays),
          CalculateMaybeFeature(&membersFeatures),
          membersItems);
  tileViewId = domino!.CreateTile(initialTileDescription);
  unitViewId = 0i64;

  self =
    TerrainTilePresenter(
      domino,
      vivimap,
      terrain,
      terrainTile,
      location,
      tileViewId,
      unitViewId,
      nextMemberId,
      List<(i64, str)>(),
      membersFrontColors,
      membersSideColors,
      List<(i64, InitialSymbol)>(),
      membersOverlays,
      List<(i64, InitialSymbol)>(),
      List<(i64, InitialSymbol)>(),
      List<(i64, Vec4iAnimation)>(),
      List<(i64, InitialSymbol)>(),
      List<(i64, InitialSymbol)>(),
      highlighted,
      selected);

  self!.RefreshUnit();

  foreach member in terrainTile.members {
    self!.OnAddMember(member);
  }

  ret self;
}

func initialized(self &TerrainTilePresenter) bool {
  ret self.tileViewId != 0i64;
}

//     private static Vec3 CalculatePosition(int elevationStepHeight, Pattern pattern, Location location, int elevation) {
//       var positionVec2 = pattern.GetTileCenter(location);
//       var positionVec3 = new Vec3(positionVec2.x, positionVec2.y, elevation * elevationStepHeight);
//       ret positionVec3;
//     }
// 
func SetHighlighted(self &!TerrainTilePresenter, highlighted bool) {
  println("Setting location {self.location} to highlighted={highlighted})");
  set self.highlighted = highlighted;
  self!.RefreshSurfaceColor();
}
func SetSelected(self &!TerrainTilePresenter, selected bool) {
  println("Setting location {self.location} to selected={selected})");
  set self.selected = selected;
  self!.RefreshSurfaceColor();
}

func RefreshSurfaceColor(self &!TerrainTilePresenter) {
  vassert(self.membersFrontColors.len() > 0, "No front color!");
  self.domino!.SetSurfaceColor(
      self.tileViewId, 
      CalculateTintedFrontColor(
          self.membersFrontColors.get(self.membersFrontColors.len() - 1).1,
          self.selected,
          self.highlighted));
}

func RefreshSideColor(self &!TerrainTilePresenter) {
  vassert(self.membersSideColors.len() > 0, "No side color!");
  self.domino!.SetCliffColor(
    self.tileViewId,
    self.membersSideColors.get(self.membersSideColors.len() - 1).1.clone());
}

func RefreshFeature(self &!TerrainTilePresenter) {
  self.domino!.SetFeature(
      self.tileViewId,
      if self.membersFeatures.len() == 0 { None<InitialSymbol>() }
      else { Some<InitialSymbol>(self.membersFeatures.get(self.membersFeatures.len() - 1).1.clone()) });
}


func RefreshUnit(self &!TerrainTilePresenter) {
  if self.unitViewId != 0i64 {
    self.domino!.DestroyUnit(self.unitViewId);
    set self.unitViewId = 0i64;
  }
  if self.unitViewId == 0i64 and self.membersUnitDominoFaces.len() > 0 {
    // var defaultColor = new Color(102, 102, 0, 1);
    
    // var position = CalculatePosition(terrain.elevationStepHeight, terrain.pattern, location, terrainTile.elevation);
    initialUnit =
        InitialUnit(
            self.location,
            if self.membersUnitDominoSymbols.len() == 0 {
              defaultSymbol =
                  InitialSymbol(
                      InitialSymbolGlyph(
                          SymbolId("AthSymbols", 106),
                          ConstantVec4iAnimationRed()),
                      None<InitialSymbolOutline>(),
                      None<InitialSymbolSides>(),
                      0,
                      100);
              defaultSymbol
            } else {
              self.membersUnitDominoSymbols.get(self.membersUnitDominoSymbols.len() - 1).1.clone()
            },
            self.membersUnitDominoFaces.get(self.membersUnitDominoFaces.len() - 1).1.clone(),
            self.membersUnitDetails.map(([a, b]) => { (a, b.clone()) }),
            1,
            1);
    set self.unitViewId = self.domino!.CreateUnit(initialUnit);
  }
}

func RefreshDomino(self &!TerrainTilePresenter) {
  // TODO: replace this with a call to unitView.SetDomino
  self!.RefreshUnit();
}

func RefreshUnitDominoShape(self &!TerrainTilePresenter) {
  // TODO: replace this with a call to unitView.SetSymbol
  self!.RefreshUnit();
}

func RefreshUnitDominoFace(self &!TerrainTilePresenter) {
  // TODO: replace this with a call to unitView.SetFace
  self!.RefreshUnit();
}

func RefreshUnitDetails(self &!TerrainTilePresenter) {
  // TODO: replace this with a call to unitView.SetDetails or something
  self!.RefreshUnit();
}

func RefreshOverlay(self &!TerrainTilePresenter) {
  println("RefreshOverlay len " + self.membersOverlays.len());
  self.domino!.SetOverlay(
    self.tileViewId,
    CalculateMaybeOverlay(&self.membersOverlays));
}

func RefreshItems(self &!TerrainTilePresenter) {
  self.domino!.ClearItems(self.tileViewId);
  foreach [id, item] in self.membersItems {
    self.domino!.AddItem(self.tileViewId, id, item.clone());
  }
}

func RefreshDetails(self &!TerrainTilePresenter) {
  // unitView.ClearDetails();
  // foreach (var x in membersUnitDetails) {
  //   unitView.AddItem(x.Item1, x.Item2);
  // }
  // TODO put the above in
  self!.RefreshUnit();
}


func OnAddMember(self &!TerrainTilePresenter, member str) {
  println("Adding member: " + member);
  memberId = set self.nextMemberId = self.nextMemberId + 1i64;
  self.members!.add((memberId, member));
  foreach thing in self.vivimap.getEntries(member) {
    maybe_top_color = thing.as<TopColorDescriptionForIDescription>();
    if maybe_top_color.is_ok() {
      top_color = &maybe_top_color.expect();

      self.membersFrontColors!.add((memberId, top_color.color.clone()));
      if self.initialized() {
        if (self.tileViewId != 0i64) {
          self!.RefreshSurfaceColor();
        }
      }
    }

    maybe_side_color = thing.as<SideColorDescriptionForIDescription>();
    if maybe_side_color.is_ok() {
      side_color = &maybe_side_color.expect();
      self.membersSideColors!.add((memberId, side_color.color.clone()));
      if self.initialized() {
        if (self.tileViewId != 0i64) {
          self!.RefreshSideColor();
        }
      }
    }

    maybe_overlay = thing.as<OverlayDescriptionForIDescription>();
    if maybe_overlay.is_ok() {
      overlay = &maybe_overlay.expect();
      self.membersOverlays!.add((memberId, overlay.symbol.clone()));
      if self.initialized() {
        if (self.tileViewId != 0i64) {
          self!.RefreshOverlay();
        }
      }
    }

    maybe_feature = thing.as<FeatureDescriptionForIDescription>();
    if maybe_feature.is_ok() {
      feature = &maybe_feature.expect();
      self.membersFeatures!.add((memberId, feature.symbol.clone()));
      if self.initialized() {
        if (self.tileViewId != 0i64) {
          self!.RefreshFeature();
        }
      }
    }

    maybe_item = thing.as<ItemDescriptionForIDescription>();
    if maybe_item.is_ok() {
      item = &maybe_item.expect();
      self.membersItems!.add((memberId, item.symbol.clone()));
      if self.initialized() {
        if (self.tileViewId != 0i64) {
          self!.RefreshItems();
        }
      }
    }

    maybe_domino_shape = thing.as<DominoShapeDescriptionForIDescription>();
    if maybe_domino_shape.is_ok() {
      domino_shape = &maybe_domino_shape.expect();
      self.membersUnitDominoSymbols!.add((memberId, domino_shape.symbol.clone()));
      if self.initialized() {
        if (self.unitViewId == 0i64) {
          self!.RefreshUnit();
        } else {
          self!.RefreshUnitDominoShape();
        }
      }
    }

    maybe_domino_face = thing.as<DominoFaceDescriptionForIDescription>();
    if maybe_domino_face.is_ok() {
      domino_face = &maybe_domino_face.expect();
      self.membersUnitDominoFaces!.add((memberId, domino_face.symbol.clone()));
      if self.initialized() {
        if (self.unitViewId == 0i64) {
          self!.RefreshUnit();
        } else {
          self!.RefreshUnitDominoFace();
        }
      }
    }

    maybe_domino_detail = thing.as<DetailDescriptionForIDescription>();
    if maybe_domino_detail.is_ok() {
      domino_detail = &maybe_domino_detail.expect();
      self.membersUnitDetails!.add((memberId, domino_detail.symbol.clone()));
      if self.initialized() {
        if (self.unitViewId == 0i64) {
          self!.RefreshUnit();
        } else {
          self!.RefreshUnitDetails();
        }
      }
    }
  }
}

func OnRemoveMember(self &!TerrainTilePresenter, index int) {
  println("Removing member at: " + index);
  [memberId, member] = self.members!.remove(index);

  foreach thing in self.vivimap.getEntries(member) {
    maybe_top_color = thing.as<TopColorDescriptionForIDescription>();
    if maybe_top_color.is_ok() {
      top_color = &maybe_top_color.expect();

      matching_member_index = self.membersFrontColors.indexWhere({_.0 == memberId}).get();
      self.membersFrontColors!.remove(matching_member_index);

      if self.tileViewId != 0i64 {
        self!.RefreshSurfaceColor();
      }
    }

    maybe_side_color = thing.as<SideColorDescriptionForIDescription>();
    if maybe_side_color.is_ok() {
      side_color = &maybe_side_color.expect();

      matching_member_index = self.membersSideColors.indexWhere({_.0 == memberId}).get();
      self.membersSideColors!.remove(matching_member_index);

      if self.tileViewId != 0i64 {
        self!.RefreshSideColor();
      }
    }

    maybe_overlay = thing.as<OverlayDescriptionForIDescription>();
    if maybe_overlay.is_ok() {
      overlay = &maybe_overlay.expect();

      matching_member_index = self.membersOverlays.indexWhere({_.0 == memberId}).get();
      self.membersOverlays!.remove(matching_member_index);

      if self.tileViewId != 0i64 {
        self!.RefreshOverlay();
      }
    }

    maybe_feature = thing.as<FeatureDescriptionForIDescription>();
    if maybe_feature.is_ok() {
      feature = &maybe_feature.expect();

      matching_member_index = self.membersFeatures.indexWhere({_.0 == memberId}).get();
      self.membersFeatures!.remove(matching_member_index);

      if self.tileViewId != 0i64 {
        self!.RefreshFeature();
      }
    }

    maybe_item = thing.as<ItemDescriptionForIDescription>();
    if maybe_item.is_ok() {
      item = &maybe_item.expect();

      matching_member_index = self.membersItems.indexWhere({_.0 == memberId}).get();
      self.membersItems!.remove(matching_member_index);

      if self.tileViewId != 0i64 {
        self!.RefreshItems();
      }
    }

    maybe_unit_domino_symbol = thing.as<DominoShapeDescriptionForIDescription>();
    if maybe_unit_domino_symbol.is_ok() {
      unit_domino_symbol = &maybe_unit_domino_symbol.expect();

      matching_member_index = self.membersUnitDominoSymbols.indexWhere({_.0 == memberId}).get();
      self.membersUnitDominoSymbols!.remove(matching_member_index);

      if self.tileViewId != 0i64 {
        self!.RefreshUnitDominoShape();
      }
    }

    maybe_unit_face = thing.as<DominoFaceDescriptionForIDescription>();
    if maybe_unit_face.is_ok() {
      unit_face = &maybe_unit_face.expect();

      matching_member_index = self.membersUnitDominoFaces.indexWhere({_.0 == memberId}).get();
      self.membersUnitDominoFaces!.remove(matching_member_index);

      if self.tileViewId != 0i64 {
        self!.RefreshUnitDominoFace();
      }
    }

    maybe_unit_detail = thing.as<DetailDescriptionForIDescription>();
    if maybe_unit_detail.is_ok() {
      unit_detail = &maybe_unit_detail.expect();

      matching_member_index = self.membersUnitDetails.indexWhere({_.0 == memberId}).get();
      self.membersUnitDetails!.remove(matching_member_index);

      if self.tileViewId != 0i64 {
        self!.RefreshUnitDetails();
      }
    }
  }
}

func AddMember(self &!TerrainTilePresenter, member str) {
  self.terrainTile.members!.add(member);
  self!.OnAddMember(member);
}

func RemoveMember(self &!TerrainTilePresenter, member str) {
  index = self.terrainTile.members.indexOf(member).get();
  self.terrainTile.members!.remove(index);
  self!.OnRemoveMember(index);
}
// 
//     public void RemoveMemberAt(int index) {
//       terrainTile.members.RemoveAt(index);
//       OnRemoveMember(index);
//     }
// 
func SetElevation(self &!TerrainTilePresenter, elevation int) {
  set self.terrainTile.elevation = elevation;
  self.domino!.SetElevation(self.tileViewId, elevation);
}
// 
//     //   if (unitView) {
//     //     unitView.Destruct();
//     //     unitView = null;
//     //   }
//     //
//     //   if (maybeUnitDescription != null) {
//     //     
//     //     // unitView.SetDescription(maybeUnitDescription);
//     //   }
//     // }
// 
//     // private (TileDescription, UnitDescription) GetDescriptions() {
//     //   var defaultUnitDescription =
//     //     new UnitDescription(
//     //       null,
//     //       new DominoDescription(false, new Color(.5f, 0, .5f)),
//     //       new InitialSymbol(
//     //         RenderPriority.DOMINO,
//     //         new SymbolDescription(
//     //           "a", new Color(0, 1, 0), 45, 1, OutlineMode.WithBackOutline),
//     //         true,
//     //         new Color(0, 0, 0)),
//     //       new List<(int, InitialSymbol)>(),
//     //       1,
//     //       1);
//     //
//     //   var (tileDescription, unitDescription) =
//     //     vivimap.Vivify(defaultTileDescription, defaultUnitDescription, members);
//     //   ret (tileDescription, unitDescription);
//     // }
// 
//     public void DestroyTerrainTilePresenter() {
//       domino.DestroyTile(tileViewId);
//     }

func CalculateMaybeOverlay(membersOverlays &List<(i64, InitialSymbol)>) Opt<InitialSymbol> {
  if membersOverlays.len() == 0 {
    ret None<InitialSymbol>();
  }
  ret Some(membersOverlays.get(membersOverlays.len() - 1).1.clone());
}


func CalculateMaybeFeature(membersFeatures &List<(i64, InitialSymbol)>) Opt<InitialSymbol> {
  if membersFeatures.len() == 0 {
    ret None<InitialSymbol>();
  }
  ret Some(membersFeatures.get(membersFeatures.len() - 1).1.clone());
}

func CalculateTintedFrontColor(
    membersFrontColor &Vec4iAnimation,
    selected bool,
    highlighted bool)
Vec4iAnimation {
  if (selected and highlighted) {
    ret DivideVec4iAnimation(
        AddVec4iAnimation(
            MultiplyVec4iAnimation(
                membersFrontColor.clone(), ConstantVec4iAnimationAll(63)),
            MultiplyVec4iAnimation(
                ConstantVec4iAnimationWhite(), ConstantVec4iAnimationAll(37))),
        ConstantVec4iAnimationAll(100));
  } else if (selected) {
    ret DivideVec4iAnimation(
        AddVec4iAnimation(
            MultiplyVec4iAnimation(
                membersFrontColor.clone(), ConstantVec4iAnimationAll(75)),
            MultiplyVec4iAnimation(
                ConstantVec4iAnimationWhite(), ConstantVec4iAnimationAll(25))),
        ConstantVec4iAnimationAll(100));
  } else if (highlighted) {
    ret DivideVec4iAnimation(
        AddVec4iAnimation(
            MultiplyVec4iAnimation(
                membersFrontColor.clone(), ConstantVec4iAnimationAll(87)),
            MultiplyVec4iAnimation(
                ConstantVec4iAnimationWhite(), ConstantVec4iAnimationAll(13))),
        ConstantVec4iAnimationAll(100));
  } else {
    ret membersFrontColor.clone();
  }
}
